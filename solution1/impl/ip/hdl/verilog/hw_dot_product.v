// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hw_dot_product,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=393,HLS_SYN_LUT=514,HLS_VERSION=2018_2}" *)

module hw_dot_product (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [3:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;
output  [3:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [3:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [31:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] a_address0;
reg a_ce0;
reg[3:0] a_address1;
reg a_ce1;
reg[3:0] b_address0;
reg b_ce0;
reg[3:0] b_address1;
reg b_ce1;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_239;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg  signed [31:0] reg_243;
reg  signed [31:0] reg_247;
reg  signed [31:0] reg_251;
wire   [31:0] grp_fu_255_p2;
reg   [31:0] reg_267;
wire   [31:0] grp_fu_261_p2;
reg   [31:0] reg_271;
reg   [31:0] reg_275;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp1_fu_279_p2;
reg   [31:0] tmp1_reg_409;
reg   [31:0] tmp_1_5_reg_414;
wire   [31:0] tmp2_fu_291_p2;
reg   [31:0] tmp2_reg_439;
reg   [31:0] tmp_1_9_reg_444;
wire   [31:0] tmp4_fu_313_p2;
reg   [31:0] tmp4_reg_449;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp3_fu_285_p2;
wire   [31:0] tmp7_fu_302_p2;
wire   [31:0] tmp6_fu_307_p2;
wire   [31:0] tmp5_fu_297_p2;
wire   [31:0] tmp_fu_319_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_239 <= a_q0;
        reg_243 <= b_q0;
        reg_247 <= a_q1;
        reg_251 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_267 <= grp_fu_255_p2;
        reg_271 <= grp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_275 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_409 <= tmp1_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp2_reg_439 <= tmp2_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp4_reg_449 <= tmp4_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_5_reg_414 <= grp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_9_reg_444 <= grp_fu_261_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = 64'd0;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address1 = 64'd1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd0;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_255_p2 = ($signed(reg_239) * $signed(reg_243));

assign grp_fu_261_p2 = ($signed(reg_247) * $signed(reg_251));

assign out_r = (tmp4_reg_449 + tmp_fu_319_p2);

assign tmp1_fu_279_p2 = (reg_267 + reg_271);

assign tmp2_fu_291_p2 = (tmp3_fu_285_p2 + reg_267);

assign tmp3_fu_285_p2 = (reg_271 + reg_275);

assign tmp4_fu_313_p2 = (tmp6_fu_307_p2 + tmp5_fu_297_p2);

assign tmp5_fu_297_p2 = (tmp_1_5_reg_414 + reg_267);

assign tmp6_fu_307_p2 = (tmp7_fu_302_p2 + reg_271);

assign tmp7_fu_302_p2 = (reg_275 + tmp_1_9_reg_444);

assign tmp_fu_319_p2 = (tmp2_reg_439 + tmp1_reg_409);

endmodule //hw_dot_product
